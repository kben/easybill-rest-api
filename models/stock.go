// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stock stock
//
// swagger:model Stock
type Stock struct {

	// created at
	// Read Only: true
	// Format: datetime
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// document id
	// Read Only: true
	DocumentID *int64 `json:"document_id,omitempty"`

	// document position id
	// Read Only: true
	DocumentPositionID *int64 `json:"document_position_id,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// note
	Note string `json:"note,omitempty"`

	// position id
	// Required: true
	PositionID *int64 `json:"position_id"`

	// stock count
	// Required: true
	StockCount *int64 `json:"stock_count"`

	// stored at
	// Format: datetime
	StoredAt *strfmt.DateTime `json:"stored_at,omitempty"`

	// updated at
	// Read Only: true
	// Format: datetime
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this stock
func (m *Stock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePositionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStockCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stock) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "datetime", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stock) validatePositionID(formats strfmt.Registry) error {

	if err := validate.Required("position_id", "body", m.PositionID); err != nil {
		return err
	}

	return nil
}

func (m *Stock) validateStockCount(formats strfmt.Registry) error {

	if err := validate.Required("stock_count", "body", m.StockCount); err != nil {
		return err
	}

	return nil
}

func (m *Stock) validateStoredAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StoredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("stored_at", "body", "datetime", m.StoredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stock) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "datetime", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stock) UnmarshalBinary(b []byte) error {
	var res Stock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
