// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeTracking time tracking
//
// swagger:model TimeTracking
type TimeTracking struct {

	// cleared at
	// Format: date-time
	ClearedAt *strfmt.DateTime `json:"cleared_at,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// date from at
	// Format: date-time
	DateFromAt *strfmt.DateTime `json:"date_from_at,omitempty"`

	// date thru at
	// Format: date-time
	DateThruAt *strfmt.DateTime `json:"date_thru_at,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// Hourly rate in cents (e.g. "150" = 1.50â‚¬)
	HourlyRate float32 `json:"hourly_rate,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// If omitted or null, the currently active login is used.
	LoginID *int64 `json:"login_id,omitempty"`

	// note
	Note *string `json:"note,omitempty"`

	// Can be chosen freely
	Number *string `json:"number,omitempty"`

	// position id
	PositionID *int64 `json:"position_id,omitempty"`

	// project id
	ProjectID *int64 `json:"project_id,omitempty"`

	// Tracked time in minutes
	TimerValue *int64 `json:"timer_value,omitempty"`
}

// Validate validates this time tracking
func (m *TimeTracking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClearedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateFromAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateThruAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeTracking) validateClearedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ClearedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("cleared_at", "body", "date-time", m.ClearedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeTracking) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeTracking) validateDateFromAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DateFromAt) { // not required
		return nil
	}

	if err := validate.FormatOf("date_from_at", "body", "date-time", m.DateFromAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeTracking) validateDateThruAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DateThruAt) { // not required
		return nil
	}

	if err := validate.FormatOf("date_thru_at", "body", "date-time", m.DateThruAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeTracking) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeTracking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeTracking) UnmarshalBinary(b []byte) error {
	var res TimeTracking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
