// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Position position
//
// swagger:model Position
type Position struct {

	// Price in cents (e.g. "150" = 1.50€)
	CostPrice *float32 `json:"cost_price,omitempty"`

	// The positions name or description
	// Required: true
	Description *string `json:"description"`

	// export cost1
	ExportCost1 *string `json:"export_cost1,omitempty"`

	// export cost2
	ExportCost2 *string `json:"export_cost2,omitempty"`

	// The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant.
	ExportIdentifier *string `json:"export_identifier,omitempty"`

	// export identifier extended
	ExportIdentifierExtended *PositionExportIdentifierExtended `json:"export_identifier_extended,omitempty"`

	// group id
	GroupID *int64 `json:"group_id,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// login id
	// Read Only: true
	LoginID int64 `json:"login_id,omitempty"`

	// Note for internal use
	Note *string `json:"note,omitempty"`

	// number
	// Required: true
	Number *string `json:"number"`

	// price type
	// Enum: [BRUTTO NETTO]
	PriceType *string `json:"price_type,omitempty"`

	// Used as the default quantity when adding this position to a document
	Quantity *float32 `json:"quantity,omitempty"`

	// Price in cents (e.g. "150" = 1.50€)
	// Required: true
	SalePrice *float32 `json:"sale_price"`

	// Price for customers of group 10 in cents (e.g. "150" = 1.50€)
	SalePrice10 *float32 `json:"sale_price10,omitempty"`

	// Price for customers of group 2 in cents (e.g. "150" = 1.50€)
	SalePrice2 *float32 `json:"sale_price2,omitempty"`

	// Price for customers of group 3 in cents (e.g. "150" = 1.50€)
	SalePrice3 *float32 `json:"sale_price3,omitempty"`

	// Price for customers of group 4 in cents (e.g. "150" = 1.50€)
	SalePrice4 *float32 `json:"sale_price4,omitempty"`

	// Price for customers of group 5 in cents (e.g. "150" = 1.50€)
	SalePrice5 *float32 `json:"sale_price5,omitempty"`

	// Price for customers of group 6 in cents (e.g. "150" = 1.50€)
	SalePrice6 *float32 `json:"sale_price6,omitempty"`

	// Price for customers of group 7 in cents (e.g. "150" = 1.50€)
	SalePrice7 *float32 `json:"sale_price7,omitempty"`

	// Price for customers of group 8 in cents (e.g. "150" = 1.50€)
	SalePrice8 *float32 `json:"sale_price8,omitempty"`

	// Price for customers of group 9 in cents (e.g. "150" = 1.50€)
	SalePrice9 *float32 `json:"sale_price9,omitempty"`

	// Activates stock management for this position
	// Enum: [YES NO]
	Stock *string `json:"stock,omitempty"`

	// Current stock count
	// Read Only: true
	StockCount int64 `json:"stock_count,omitempty"`

	// stock limit
	StockLimit int64 `json:"stock_limit,omitempty"`

	// Notify when stock_count is lower than stock_limit
	StockLimitNotify *bool `json:"stock_limit_notify,omitempty"`

	// type
	// Enum: [PRODUCT SERVICE TEXT]
	Type *string `json:"type,omitempty"`

	// unit
	Unit *string `json:"unit,omitempty"`

	// vat percent
	VatPercent *float32 `json:"vat_percent,omitempty"`
}

// Validate validates this position
func (m *Position) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportIdentifierExtended(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Position) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Position) validateExportIdentifierExtended(formats strfmt.Registry) error {

	if swag.IsZero(m.ExportIdentifierExtended) { // not required
		return nil
	}

	if m.ExportIdentifierExtended != nil {
		if err := m.ExportIdentifierExtended.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("export_identifier_extended")
			}
			return err
		}
	}

	return nil
}

func (m *Position) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

var positionTypePriceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BRUTTO","NETTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionTypePriceTypePropEnum = append(positionTypePriceTypePropEnum, v)
	}
}

const (

	// PositionPriceTypeBRUTTO captures enum value "BRUTTO"
	PositionPriceTypeBRUTTO string = "BRUTTO"

	// PositionPriceTypeNETTO captures enum value "NETTO"
	PositionPriceTypeNETTO string = "NETTO"
)

// prop value enum
func (m *Position) validatePriceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, positionTypePriceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Position) validatePriceType(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceTypeEnum("price_type", "body", *m.PriceType); err != nil {
		return err
	}

	return nil
}

func (m *Position) validateSalePrice(formats strfmt.Registry) error {

	if err := validate.Required("sale_price", "body", m.SalePrice); err != nil {
		return err
	}

	return nil
}

var positionTypeStockPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["YES","NO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionTypeStockPropEnum = append(positionTypeStockPropEnum, v)
	}
}

const (

	// PositionStockYES captures enum value "YES"
	PositionStockYES string = "YES"

	// PositionStockNO captures enum value "NO"
	PositionStockNO string = "NO"
)

// prop value enum
func (m *Position) validateStockEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, positionTypeStockPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Position) validateStock(formats strfmt.Registry) error {

	if swag.IsZero(m.Stock) { // not required
		return nil
	}

	// value enum
	if err := m.validateStockEnum("stock", "body", *m.Stock); err != nil {
		return err
	}

	return nil
}

var positionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRODUCT","SERVICE","TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		positionTypeTypePropEnum = append(positionTypeTypePropEnum, v)
	}
}

const (

	// PositionTypePRODUCT captures enum value "PRODUCT"
	PositionTypePRODUCT string = "PRODUCT"

	// PositionTypeSERVICE captures enum value "SERVICE"
	PositionTypeSERVICE string = "SERVICE"

	// PositionTypeTEXT captures enum value "TEXT"
	PositionTypeTEXT string = "TEXT"
)

// prop value enum
func (m *Position) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, positionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Position) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Position) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Position) UnmarshalBinary(b []byte) error {
	var res Position
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PositionExportIdentifierExtended position export identifier extended
//
// swagger:model PositionExportIdentifierExtended
type PositionExportIdentifierExtended struct {

	// Ausfuhrlieferung
	AL interface{} `json:"AL,omitempty"`

	// Innergemeinschaftliche Lieferung
	IG interface{} `json:"IG,omitempty"`

	// Umsatzsteuerpflichtig
	NULL interface{} `json:"NULL,omitempty"`

	// Nicht steuerbar (Drittland)
	NStb interface{} `json:"nStb,omitempty"`

	// Nicht steuerbarer Innenumsatz
	NStbIm interface{} `json:"nStbIm,omitempty"`

	// Nicht steuerbar (EU ohne USt-IdNr.)
	NStbNoneUstID interface{} `json:"nStbNoneUstID,omitempty"`

	// Nicht steuerbar (EU mit USt-IdNr.)
	NStbUstID interface{} `json:"nStbUstID,omitempty"`

	// Steuerschuldwechsel §13b (Inland)
	Revc interface{} `json:"revc,omitempty"`

	// sonstige Steuerbefreiung
	SStfr interface{} `json:"sStfr,omitempty"`

	// Kleinunternehmen (Keine MwSt.)
	SmallBusiness interface{} `json:"smallBusiness,omitempty"`
}

// Validate validates this position export identifier extended
func (m *PositionExportIdentifierExtended) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PositionExportIdentifierExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PositionExportIdentifierExtended) UnmarshalBinary(b []byte) error {
	var res PositionExportIdentifierExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
