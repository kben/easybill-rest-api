// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Login login
//
// swagger:model Login
type Login struct {

	// display name
	// Read Only: true
	DisplayName string `json:"display_name,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// email signature
	EmailSignature string `json:"email_signature,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// login type
	// Enum: [ADMIN ASSISTANT]
	LoginType *string `json:"login_type,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`
}

// Validate validates this login
func (m *Login) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoginType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var loginTypeLoginTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMIN","ASSISTANT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginTypeLoginTypePropEnum = append(loginTypeLoginTypePropEnum, v)
	}
}

const (

	// LoginLoginTypeADMIN captures enum value "ADMIN"
	LoginLoginTypeADMIN string = "ADMIN"

	// LoginLoginTypeASSISTANT captures enum value "ASSISTANT"
	LoginLoginTypeASSISTANT string = "ASSISTANT"
)

// prop value enum
func (m *Login) validateLoginTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginTypeLoginTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Login) validateLoginType(formats strfmt.Registry) error {

	if swag.IsZero(m.LoginType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLoginTypeEnum("login_type", "body", *m.LoginType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Login) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Login) UnmarshalBinary(b []byte) error {
	var res Login
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
