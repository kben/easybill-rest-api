// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentPayment document payment
//
// swagger:model DocumentPayment
type DocumentPayment struct {

	// amount
	// Required: true
	Amount *int32 `json:"amount"`

	// document id
	// Required: true
	DocumentID *int64 `json:"document_id"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// is overdue fee
	IsOverdueFee bool `json:"is_overdue_fee,omitempty"`

	// login id
	// Read Only: true
	LoginID int64 `json:"login_id,omitempty"`

	// notice
	Notice string `json:"notice,omitempty"`

	// payment at
	// Format: date
	PaymentAt strfmt.Date `json:"payment_at,omitempty"`

	// provider
	// Max Length: 255
	Provider string `json:"provider,omitempty"`

	// reference
	// Max Length: 255
	Reference string `json:"reference,omitempty"`

	// type
	// Max Length: 255
	Type string `json:"type,omitempty"`
}

// Validate validates this document payment
func (m *DocumentPayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentPayment) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *DocumentPayment) validateDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("document_id", "body", m.DocumentID); err != nil {
		return err
	}

	return nil
}

func (m *DocumentPayment) validatePaymentAt(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAt) { // not required
		return nil
	}

	if err := validate.FormatOf("payment_at", "body", "date", m.PaymentAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DocumentPayment) validateProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if err := validate.MaxLength("provider", "body", string(m.Provider), 255); err != nil {
		return err
	}

	return nil
}

func (m *DocumentPayment) validateReference(formats strfmt.Registry) error {

	if swag.IsZero(m.Reference) { // not required
		return nil
	}

	if err := validate.MaxLength("reference", "body", string(m.Reference), 255); err != nil {
		return err
	}

	return nil
}

func (m *DocumentPayment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("type", "body", string(m.Type), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocumentPayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentPayment) UnmarshalBinary(b []byte) error {
	var res DocumentPayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
