// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task task
//
// swagger:model Task
type Task struct {

	// category
	// Enum: [CALL EMAIL FAX LUNCH MEETING TRAVEL CUSTOM]
	Category *string `json:"category,omitempty"`

	// The name of your custom category. Can only have a value if "category" is "CUSTOM".
	CategoryCustom *string `json:"category_custom,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// customer id
	CustomerID *int64 `json:"customer_id,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// document id
	DocumentID *int64 `json:"document_id,omitempty"`

	// The deadline
	// Format: date-time
	EndAt *strfmt.DateTime `json:"end_at,omitempty"`

	// The time when the task was marked as done
	// Read Only: true
	// Format: date-time
	FinishAt *strfmt.DateTime `json:"finish_at,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// When omitted or null, the currently active login is used
	LoginID *int64 `json:"login_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// position id
	PositionID *int64 `json:"position_id,omitempty"`

	// priority
	// Enum: [LOW NORMAL HIGH]
	Priority *string `json:"priority,omitempty"`

	// project id
	ProjectID *int64 `json:"project_id,omitempty"`

	// start at
	// Format: date-time
	StartAt *strfmt.DateTime `json:"start_at,omitempty"`

	// status
	// Required: true
	// Enum: [WAITING PROCESSING DONE CANCEL]
	Status *string `json:"status"`

	// status percent
	StatusPercent *int64 `json:"status_percent,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CALL","EMAIL","FAX","LUNCH","MEETING","TRAVEL","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeCategoryPropEnum = append(taskTypeCategoryPropEnum, v)
	}
}

const (

	// TaskCategoryCALL captures enum value "CALL"
	TaskCategoryCALL string = "CALL"

	// TaskCategoryEMAIL captures enum value "EMAIL"
	TaskCategoryEMAIL string = "EMAIL"

	// TaskCategoryFAX captures enum value "FAX"
	TaskCategoryFAX string = "FAX"

	// TaskCategoryLUNCH captures enum value "LUNCH"
	TaskCategoryLUNCH string = "LUNCH"

	// TaskCategoryMEETING captures enum value "MEETING"
	TaskCategoryMEETING string = "MEETING"

	// TaskCategoryTRAVEL captures enum value "TRAVEL"
	TaskCategoryTRAVEL string = "TRAVEL"

	// TaskCategoryCUSTOM captures enum value "CUSTOM"
	TaskCategoryCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *Task) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateEndAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date-time", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateFinishAt(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finish_at", "body", "date-time", m.FinishAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var taskTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOW","NORMAL","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypePriorityPropEnum = append(taskTypePriorityPropEnum, v)
	}
}

const (

	// TaskPriorityLOW captures enum value "LOW"
	TaskPriorityLOW string = "LOW"

	// TaskPriorityNORMAL captures enum value "NORMAL"
	TaskPriorityNORMAL string = "NORMAL"

	// TaskPriorityHIGH captures enum value "HIGH"
	TaskPriorityHIGH string = "HIGH"
)

// prop value enum
func (m *Task) validatePriorityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypePriorityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", *m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateStartAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartAt) { // not required
		return nil
	}

	if err := validate.FormatOf("start_at", "body", "date-time", m.StartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var taskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING","PROCESSING","DONE","CANCEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStatusPropEnum = append(taskTypeStatusPropEnum, v)
	}
}

const (

	// TaskStatusWAITING captures enum value "WAITING"
	TaskStatusWAITING string = "WAITING"

	// TaskStatusPROCESSING captures enum value "PROCESSING"
	TaskStatusPROCESSING string = "PROCESSING"

	// TaskStatusDONE captures enum value "DONE"
	TaskStatusDONE string = "DONE"

	// TaskStatusCANCEL captures enum value "CANCEL"
	TaskStatusCANCEL string = "CANCEL"
)

// prop value enum
func (m *Task) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
