// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contact contact
//
// swagger:model Contact
type Contact struct {

	// city
	// Required: true
	City *string `json:"city"`

	// company name
	CompanyName *string `json:"company_name,omitempty"`

	// Two-letter country code
	Country string `json:"country,omitempty"`

	// created at
	// Read Only: true
	// Format: datetime
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// department
	Department *string `json:"department,omitempty"`

	// emails
	Emails []string `json:"emails"`

	// fax
	Fax *string `json:"fax,omitempty"`

	// first name
	FirstName *string `json:"first_name,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// last name
	LastName *string `json:"last_name,omitempty"`

	// login id
	// Read Only: true
	LoginID int64 `json:"login_id,omitempty"`

	// mobile
	Mobile *string `json:"mobile,omitempty"`

	// note
	Note *string `json:"note,omitempty"`

	// personal
	Personal *bool `json:"personal,omitempty"`

	// phone 1
	Phone1 *string `json:"phone_1,omitempty"`

	// phone 2
	Phone2 *string `json:"phone_2,omitempty"`

	// 0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie
	Salutation int64 `json:"salutation,omitempty"`

	// street
	// Required: true
	Street *string `json:"street"`

	// suffix 1
	Suffix1 *string `json:"suffix_1,omitempty"`

	// suffix 2
	Suffix2 *string `json:"suffix_2,omitempty"`

	// title
	Title *string `json:"title,omitempty"`

	// updated at
	// Read Only: true
	// Format: datetime
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// zip code
	ZipCode *string `json:"zip_code,omitempty"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "datetime", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {

	}

	return nil
}

func (m *Contact) validateStreet(formats strfmt.Registry) error {

	if err := validate.Required("street", "body", m.Street); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "datetime", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
