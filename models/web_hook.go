// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebHook web hook
//
// swagger:model WebHook
type WebHook struct {

	// content type
	// Required: true
	// Enum: [form json]
	ContentType *string `json:"content_type"`

	// description
	// Required: true
	Description *string `json:"description"`

	// events
	// Required: true
	Events []string `json:"events"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// is active
	IsActive *bool `json:"is_active,omitempty"`

	// last response
	LastResponse *WebHookLastResponse `json:"last_response,omitempty"`

	// secret
	// Required: true
	Secret *string `json:"secret"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this web hook
func (m *WebHook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var webHookTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["form","json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webHookTypeContentTypePropEnum = append(webHookTypeContentTypePropEnum, v)
	}
}

const (

	// WebHookContentTypeForm captures enum value "form"
	WebHookContentTypeForm string = "form"

	// WebHookContentTypeJSON captures enum value "json"
	WebHookContentTypeJSON string = "json"
)

// prop value enum
func (m *WebHook) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webHookTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebHook) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("content_type", "body", m.ContentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContentTypeEnum("content_type", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *WebHook) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var webHookEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["document.create","document.update","document.completed","document.deleted","document.payment_add","document.payment_delete","customer.create","customer.update","customer.delete","contact.create","contact.update","contact.delete","position.create","position.update","position.delete","postbox.create","postbox.update","postbox.delete","postbox.sent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		webHookEventsItemsEnum = append(webHookEventsItemsEnum, v)
	}
}

func (m *WebHook) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, webHookEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *WebHook) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *WebHook) validateLastResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.LastResponse) { // not required
		return nil
	}

	if m.LastResponse != nil {
		if err := m.LastResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_response")
			}
			return err
		}
	}

	return nil
}

func (m *WebHook) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("secret", "body", m.Secret); err != nil {
		return err
	}

	return nil
}

func (m *WebHook) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebHook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebHook) UnmarshalBinary(b []byte) error {
	var res WebHook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WebHookLastResponse web hook last response
//
// swagger:model WebHookLastResponse
type WebHookLastResponse struct {

	// code
	// Read Only: true
	Code int64 `json:"code,omitempty"`

	// date
	// Read Only: true
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// response
	// Read Only: true
	Response string `json:"response,omitempty"`
}

// Validate validates this web hook last response
func (m *WebHookLastResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebHookLastResponse) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("last_response"+"."+"date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebHookLastResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebHookLastResponse) UnmarshalBinary(b []byte) error {
	var res WebHookLastResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
