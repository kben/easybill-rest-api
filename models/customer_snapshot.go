// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomerSnapshot A snapshot of the customer model which belongs to a document. This model is readonly and the state is final after finalization of the document. It's is identical to the state of the customer model at the time of finalization. Updates to the actual customer dataset won't affect this snapshot, however if you update the document the customer and therefore the customer snapshot may reflect a different state.
//
// swagger:model CustomerSnapshot
type CustomerSnapshot struct {
	Customer
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CustomerSnapshot) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Customer
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Customer = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CustomerSnapshot) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Customer)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this customer snapshot
func (m *CustomerSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Customer
	if err := m.Customer.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerSnapshot) UnmarshalBinary(b []byte) error {
	var res CustomerSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
