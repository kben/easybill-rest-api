// Code generated by go-swagger; DO NOT EDIT.

package position_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new position group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for position group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePositionGroupsID(params *DeletePositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePositionGroupsIDNoContent, error)

	GetPositionGroups(params *GetPositionGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionGroupsOK, error)

	GetPositionGroupsID(params *GetPositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionGroupsIDOK, error)

	PostPositionGroups(params *PostPositionGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPositionGroupsCreated, error)

	PutPositionGroupsID(params *PutPositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPositionGroupsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePositionGroupsID deletes position group
*/
func (a *Client) DeletePositionGroupsID(params *DeletePositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePositionGroupsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePositionGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePositionGroupsID",
		Method:             "DELETE",
		PathPattern:        "/position-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePositionGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePositionGroupsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePositionGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPositionGroups fetches position group list
*/
func (a *Client) GetPositionGroups(params *GetPositionGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositionGroups",
		Method:             "GET",
		PathPattern:        "/position-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPositionGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPositionGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPositionGroupsID fetches position group
*/
func (a *Client) GetPositionGroupsID(params *GetPositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositionGroupsID",
		Method:             "GET",
		PathPattern:        "/position-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPositionGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPositionGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPositionGroups creates position group
*/
func (a *Client) PostPositionGroups(params *PostPositionGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPositionGroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPositionGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPositionGroups",
		Method:             "POST",
		PathPattern:        "/position-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPositionGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPositionGroupsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPositionGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPositionGroupsID updates position group
*/
func (a *Client) PutPositionGroupsID(params *PutPositionGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPositionGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPositionGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPositionGroupsID",
		Method:             "PUT",
		PathPattern:        "/position-groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPositionGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPositionGroupsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPositionGroupsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
