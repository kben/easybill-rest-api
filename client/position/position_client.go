// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new position API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for position API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePositionsID(params *DeletePositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePositionsIDNoContent, error)

	GetPositions(params *GetPositionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionsOK, error)

	GetPositionsID(params *GetPositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionsIDOK, error)

	PostPositions(params *PostPositionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPositionsCreated, error)

	PutPositionsID(params *PutPositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPositionsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePositionsID deletes position
*/
func (a *Client) DeletePositionsID(params *DeletePositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePositionsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePositionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePositionsID",
		Method:             "DELETE",
		PathPattern:        "/positions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePositionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePositionsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePositionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPositions fetches positions list
*/
func (a *Client) GetPositions(params *GetPositionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositions",
		Method:             "GET",
		PathPattern:        "/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPositionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPositions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPositionsID fetches position
*/
func (a *Client) GetPositionsID(params *GetPositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPositionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPositionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPositionsID",
		Method:             "GET",
		PathPattern:        "/positions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPositionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPositionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPositionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostPositions creates position
*/
func (a *Client) PostPositions(params *PostPositionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPositionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPositions",
		Method:             "POST",
		PathPattern:        "/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPositionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostPositionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostPositions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPositionsID updates position
*/
func (a *Client) PutPositionsID(params *PutPositionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutPositionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPositionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPositionsID",
		Method:             "PUT",
		PathPattern:        "/positions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPositionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPositionsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPositionsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
