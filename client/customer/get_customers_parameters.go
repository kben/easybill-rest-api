// Code generated by go-swagger; DO NOT EDIT.

package customer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCustomersParams creates a new GetCustomersParams object
// with the default values initialized.
func NewGetCustomersParams() *GetCustomersParams {
	var ()
	return &GetCustomersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCustomersParamsWithTimeout creates a new GetCustomersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCustomersParamsWithTimeout(timeout time.Duration) *GetCustomersParams {
	var ()
	return &GetCustomersParams{

		timeout: timeout,
	}
}

// NewGetCustomersParamsWithContext creates a new GetCustomersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCustomersParamsWithContext(ctx context.Context) *GetCustomersParams {
	var ()
	return &GetCustomersParams{

		Context: ctx,
	}
}

// NewGetCustomersParamsWithHTTPClient creates a new GetCustomersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCustomersParamsWithHTTPClient(client *http.Client) *GetCustomersParams {
	var ()
	return &GetCustomersParams{
		HTTPClient: client,
	}
}

/*GetCustomersParams contains all the parameters to send to the API endpoint
for the get customers operation typically these are written to a http.Request
*/
type GetCustomersParams struct {

	/*AdditionalGroupID
	  Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id.

	*/
	AdditionalGroupID *string
	/*CompanyName
	  Filter customers by first_name. You can add multiple names separate by comma like name,name,name.

	*/
	CompanyName *string
	/*Country
	  Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR.

	*/
	Country *string
	/*CreatedAt
	  Filter customers by created_at. You can filter one date with created_at=2014-12-10 or between like 2015-01-01,2015-12-31.

	*/
	CreatedAt *string
	/*Emails
	  Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail.

	*/
	Emails *string
	/*FirstName
	  Filter customers by first_name. You can add multiple names separate by comma like name,name,name.

	*/
	FirstName *string
	/*GroupID
	  Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id.

	*/
	GroupID *string
	/*LastName
	  Filter customers by first_name. You can add multiple names separate by comma like name,name,name.

	*/
	LastName *string
	/*Limit
	  Limited the result. Default is 100. Maximum can be 1000.

	*/
	Limit *int64
	/*Number
	  Filter customers by number. You can add multiple numbers separate by comma like no,no,no.

	*/
	Number *string
	/*Page
	  Set current Page. Default is 1.

	*/
	Page *int64
	/*ZipCode
	  Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip.

	*/
	ZipCode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get customers params
func (o *GetCustomersParams) WithTimeout(timeout time.Duration) *GetCustomersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get customers params
func (o *GetCustomersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get customers params
func (o *GetCustomersParams) WithContext(ctx context.Context) *GetCustomersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get customers params
func (o *GetCustomersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get customers params
func (o *GetCustomersParams) WithHTTPClient(client *http.Client) *GetCustomersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get customers params
func (o *GetCustomersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAdditionalGroupID adds the additionalGroupID to the get customers params
func (o *GetCustomersParams) WithAdditionalGroupID(additionalGroupID *string) *GetCustomersParams {
	o.SetAdditionalGroupID(additionalGroupID)
	return o
}

// SetAdditionalGroupID adds the additionalGroupId to the get customers params
func (o *GetCustomersParams) SetAdditionalGroupID(additionalGroupID *string) {
	o.AdditionalGroupID = additionalGroupID
}

// WithCompanyName adds the companyName to the get customers params
func (o *GetCustomersParams) WithCompanyName(companyName *string) *GetCustomersParams {
	o.SetCompanyName(companyName)
	return o
}

// SetCompanyName adds the companyName to the get customers params
func (o *GetCustomersParams) SetCompanyName(companyName *string) {
	o.CompanyName = companyName
}

// WithCountry adds the country to the get customers params
func (o *GetCustomersParams) WithCountry(country *string) *GetCustomersParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get customers params
func (o *GetCustomersParams) SetCountry(country *string) {
	o.Country = country
}

// WithCreatedAt adds the createdAt to the get customers params
func (o *GetCustomersParams) WithCreatedAt(createdAt *string) *GetCustomersParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get customers params
func (o *GetCustomersParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithEmails adds the emails to the get customers params
func (o *GetCustomersParams) WithEmails(emails *string) *GetCustomersParams {
	o.SetEmails(emails)
	return o
}

// SetEmails adds the emails to the get customers params
func (o *GetCustomersParams) SetEmails(emails *string) {
	o.Emails = emails
}

// WithFirstName adds the firstName to the get customers params
func (o *GetCustomersParams) WithFirstName(firstName *string) *GetCustomersParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the get customers params
func (o *GetCustomersParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithGroupID adds the groupID to the get customers params
func (o *GetCustomersParams) WithGroupID(groupID *string) *GetCustomersParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get customers params
func (o *GetCustomersParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithLastName adds the lastName to the get customers params
func (o *GetCustomersParams) WithLastName(lastName *string) *GetCustomersParams {
	o.SetLastName(lastName)
	return o
}

// SetLastName adds the lastName to the get customers params
func (o *GetCustomersParams) SetLastName(lastName *string) {
	o.LastName = lastName
}

// WithLimit adds the limit to the get customers params
func (o *GetCustomersParams) WithLimit(limit *int64) *GetCustomersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get customers params
func (o *GetCustomersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNumber adds the number to the get customers params
func (o *GetCustomersParams) WithNumber(number *string) *GetCustomersParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get customers params
func (o *GetCustomersParams) SetNumber(number *string) {
	o.Number = number
}

// WithPage adds the page to the get customers params
func (o *GetCustomersParams) WithPage(page *int64) *GetCustomersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get customers params
func (o *GetCustomersParams) SetPage(page *int64) {
	o.Page = page
}

// WithZipCode adds the zipCode to the get customers params
func (o *GetCustomersParams) WithZipCode(zipCode *string) *GetCustomersParams {
	o.SetZipCode(zipCode)
	return o
}

// SetZipCode adds the zipCode to the get customers params
func (o *GetCustomersParams) SetZipCode(zipCode *string) {
	o.ZipCode = zipCode
}

// WriteToRequest writes these params to a swagger request
func (o *GetCustomersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AdditionalGroupID != nil {

		// query param additional_group_id
		var qrAdditionalGroupID string
		if o.AdditionalGroupID != nil {
			qrAdditionalGroupID = *o.AdditionalGroupID
		}
		qAdditionalGroupID := qrAdditionalGroupID
		if qAdditionalGroupID != "" {
			if err := r.SetQueryParam("additional_group_id", qAdditionalGroupID); err != nil {
				return err
			}
		}

	}

	if o.CompanyName != nil {

		// query param company_name
		var qrCompanyName string
		if o.CompanyName != nil {
			qrCompanyName = *o.CompanyName
		}
		qCompanyName := qrCompanyName
		if qCompanyName != "" {
			if err := r.SetQueryParam("company_name", qCompanyName); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.Emails != nil {

		// query param emails
		var qrEmails string
		if o.Emails != nil {
			qrEmails = *o.Emails
		}
		qEmails := qrEmails
		if qEmails != "" {
			if err := r.SetQueryParam("emails", qEmails); err != nil {
				return err
			}
		}

	}

	if o.FirstName != nil {

		// query param first_name
		var qrFirstName string
		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {
			if err := r.SetQueryParam("first_name", qFirstName); err != nil {
				return err
			}
		}

	}

	if o.GroupID != nil {

		// query param group_id
		var qrGroupID string
		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {
			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}

	}

	if o.LastName != nil {

		// query param last_name
		var qrLastName string
		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {
			if err := r.SetQueryParam("last_name", qLastName); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.ZipCode != nil {

		// query param zip_code
		var qrZipCode string
		if o.ZipCode != nil {
			qrZipCode = *o.ZipCode
		}
		qZipCode := qrZipCode
		if qZipCode != "" {
			if err := r.SetQueryParam("zip_code", qZipCode); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
