// Code generated by go-swagger; DO NOT EDIT.

package serial_number

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new serial number API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for serial number API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSerialNumbersID(params *DeleteSerialNumbersIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSerialNumbersIDNoContent, error)

	GetSerialNumbers(params *GetSerialNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetSerialNumbersOK, error)

	GetSerialNumbersID(params *GetSerialNumbersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSerialNumbersIDOK, error)

	PostSerialNumbers(params *PostSerialNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*PostSerialNumbersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSerialNumbersID deletes a serial number for a position
*/
func (a *Client) DeleteSerialNumbersID(params *DeleteSerialNumbersIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSerialNumbersIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSerialNumbersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSerialNumbersID",
		Method:             "DELETE",
		PathPattern:        "/serial-numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSerialNumbersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSerialNumbersIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSerialNumbersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSerialNumbers fetches a list of serial numbers for positions
*/
func (a *Client) GetSerialNumbers(params *GetSerialNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetSerialNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSerialNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSerialNumbers",
		Method:             "GET",
		PathPattern:        "/serial-numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSerialNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSerialNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSerialNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSerialNumbersID fetches a serial number for a position
*/
func (a *Client) GetSerialNumbersID(params *GetSerialNumbersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSerialNumbersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSerialNumbersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSerialNumbersID",
		Method:             "GET",
		PathPattern:        "/serial-numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSerialNumbersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSerialNumbersIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSerialNumbersID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSerialNumbers creates s serial number for a position
*/
func (a *Client) PostSerialNumbers(params *PostSerialNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*PostSerialNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSerialNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSerialNumbers",
		Method:             "POST",
		PathPattern:        "/serial-numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSerialNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSerialNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSerialNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
