// Code generated by go-swagger; DO NOT EDIT.

package serial_number

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSerialNumbersParams creates a new GetSerialNumbersParams object
// with the default values initialized.
func NewGetSerialNumbersParams() *GetSerialNumbersParams {
	var ()
	return &GetSerialNumbersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSerialNumbersParamsWithTimeout creates a new GetSerialNumbersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSerialNumbersParamsWithTimeout(timeout time.Duration) *GetSerialNumbersParams {
	var ()
	return &GetSerialNumbersParams{

		timeout: timeout,
	}
}

// NewGetSerialNumbersParamsWithContext creates a new GetSerialNumbersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSerialNumbersParamsWithContext(ctx context.Context) *GetSerialNumbersParams {
	var ()
	return &GetSerialNumbersParams{

		Context: ctx,
	}
}

// NewGetSerialNumbersParamsWithHTTPClient creates a new GetSerialNumbersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSerialNumbersParamsWithHTTPClient(client *http.Client) *GetSerialNumbersParams {
	var ()
	return &GetSerialNumbersParams{
		HTTPClient: client,
	}
}

/*GetSerialNumbersParams contains all the parameters to send to the API endpoint
for the get serial numbers operation typically these are written to a http.Request
*/
type GetSerialNumbersParams struct {

	/*DocumentID
	  Filter serial numbers by document id.

	*/
	DocumentID *string
	/*InUse
	  Filter serial numbers by usage.

	*/
	InUse *bool
	/*Limit
	  Limited the result. Default is 100. Maximum can be 1000.

	*/
	Limit *int64
	/*Page
	  Set current Page. Default is 1.

	*/
	Page *int64
	/*PositionID
	  Filter serial numbers by position id.

	*/
	PositionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get serial numbers params
func (o *GetSerialNumbersParams) WithTimeout(timeout time.Duration) *GetSerialNumbersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get serial numbers params
func (o *GetSerialNumbersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get serial numbers params
func (o *GetSerialNumbersParams) WithContext(ctx context.Context) *GetSerialNumbersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get serial numbers params
func (o *GetSerialNumbersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get serial numbers params
func (o *GetSerialNumbersParams) WithHTTPClient(client *http.Client) *GetSerialNumbersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get serial numbers params
func (o *GetSerialNumbersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDocumentID adds the documentID to the get serial numbers params
func (o *GetSerialNumbersParams) WithDocumentID(documentID *string) *GetSerialNumbersParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the get serial numbers params
func (o *GetSerialNumbersParams) SetDocumentID(documentID *string) {
	o.DocumentID = documentID
}

// WithInUse adds the inUse to the get serial numbers params
func (o *GetSerialNumbersParams) WithInUse(inUse *bool) *GetSerialNumbersParams {
	o.SetInUse(inUse)
	return o
}

// SetInUse adds the inUse to the get serial numbers params
func (o *GetSerialNumbersParams) SetInUse(inUse *bool) {
	o.InUse = inUse
}

// WithLimit adds the limit to the get serial numbers params
func (o *GetSerialNumbersParams) WithLimit(limit *int64) *GetSerialNumbersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get serial numbers params
func (o *GetSerialNumbersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPage adds the page to the get serial numbers params
func (o *GetSerialNumbersParams) WithPage(page *int64) *GetSerialNumbersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get serial numbers params
func (o *GetSerialNumbersParams) SetPage(page *int64) {
	o.Page = page
}

// WithPositionID adds the positionID to the get serial numbers params
func (o *GetSerialNumbersParams) WithPositionID(positionID *string) *GetSerialNumbersParams {
	o.SetPositionID(positionID)
	return o
}

// SetPositionID adds the positionId to the get serial numbers params
func (o *GetSerialNumbersParams) SetPositionID(positionID *string) {
	o.PositionID = positionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSerialNumbersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DocumentID != nil {

		// query param document_id
		var qrDocumentID string
		if o.DocumentID != nil {
			qrDocumentID = *o.DocumentID
		}
		qDocumentID := qrDocumentID
		if qDocumentID != "" {
			if err := r.SetQueryParam("document_id", qDocumentID); err != nil {
				return err
			}
		}

	}

	if o.InUse != nil {

		// query param in_use
		var qrInUse bool
		if o.InUse != nil {
			qrInUse = *o.InUse
		}
		qInUse := swag.FormatBool(qrInUse)
		if qInUse != "" {
			if err := r.SetQueryParam("in_use", qInUse); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PositionID != nil {

		// query param position_id
		var qrPositionID string
		if o.PositionID != nil {
			qrPositionID = *o.PositionID
		}
		qPositionID := qrPositionID
		if qPositionID != "" {
			if err := r.SetQueryParam("position_id", qPositionID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
