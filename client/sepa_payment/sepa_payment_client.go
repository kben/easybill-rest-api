// Code generated by go-swagger; DO NOT EDIT.

package sepa_payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sepa payment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sepa payment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSepaPaymentsID(params *DeleteSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSepaPaymentsIDNoContent, error)

	GetSepaPayments(params *GetSepaPaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSepaPaymentsOK, error)

	GetSepaPaymentsID(params *GetSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSepaPaymentsIDOK, error)

	PostSepaPayments(params *PostSepaPaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSepaPaymentsCreated, error)

	PutSepaPaymentsID(params *PutSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSepaPaymentsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteSepaPaymentsID deletes s e p a payment
*/
func (a *Client) DeleteSepaPaymentsID(params *DeleteSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSepaPaymentsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSepaPaymentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSepaPaymentsID",
		Method:             "DELETE",
		PathPattern:        "/sepa-payments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSepaPaymentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSepaPaymentsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSepaPaymentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSepaPayments fetches s e p a payments list
*/
func (a *Client) GetSepaPayments(params *GetSepaPaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSepaPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSepaPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSepaPayments",
		Method:             "GET",
		PathPattern:        "/sepa-payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSepaPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSepaPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSepaPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSepaPaymentsID fetches s e p a payment
*/
func (a *Client) GetSepaPaymentsID(params *GetSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSepaPaymentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSepaPaymentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSepaPaymentsID",
		Method:             "GET",
		PathPattern:        "/sepa-payments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSepaPaymentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSepaPaymentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSepaPaymentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSepaPayments creates s e p a payment
*/
func (a *Client) PostSepaPayments(params *PostSepaPaymentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSepaPaymentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSepaPaymentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSepaPayments",
		Method:             "POST",
		PathPattern:        "/sepa-payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSepaPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSepaPaymentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSepaPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSepaPaymentsID updates s e p a payment
*/
func (a *Client) PutSepaPaymentsID(params *PutSepaPaymentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSepaPaymentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSepaPaymentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSepaPaymentsID",
		Method:             "PUT",
		PathPattern:        "/sepa-payments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSepaPaymentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSepaPaymentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSepaPaymentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
