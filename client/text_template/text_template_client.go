// Code generated by go-swagger; DO NOT EDIT.

package text_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new text template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for text template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTextTemplatesID(params *DeleteTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTextTemplatesIDNoContent, error)

	GetTextTemplates(params *GetTextTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTextTemplatesOK, error)

	GetTextTemplatesID(params *GetTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTextTemplatesIDOK, error)

	PostTextTemplates(params *PostTextTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*PostTextTemplatesCreated, error)

	PutTextTemplatesID(params *PutTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTextTemplatesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTextTemplatesID deletes text template
*/
func (a *Client) DeleteTextTemplatesID(params *DeleteTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTextTemplatesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTextTemplatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTextTemplatesID",
		Method:             "DELETE",
		PathPattern:        "/text-templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTextTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTextTemplatesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTextTemplatesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTextTemplates fetches text templates list
*/
func (a *Client) GetTextTemplates(params *GetTextTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTextTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTextTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTextTemplates",
		Method:             "GET",
		PathPattern:        "/text-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTextTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTextTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTextTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTextTemplatesID fetches text template
*/
func (a *Client) GetTextTemplatesID(params *GetTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTextTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTextTemplatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTextTemplatesID",
		Method:             "GET",
		PathPattern:        "/text-templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTextTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTextTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTextTemplatesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostTextTemplates creates text template
*/
func (a *Client) PostTextTemplates(params *PostTextTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*PostTextTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTextTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTextTemplates",
		Method:             "POST",
		PathPattern:        "/text-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTextTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTextTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTextTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTextTemplatesID updates text template
*/
func (a *Client) PutTextTemplatesID(params *PutTextTemplatesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTextTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTextTemplatesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTextTemplatesID",
		Method:             "PUT",
		PathPattern:        "/text-templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTextTemplatesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTextTemplatesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTextTemplatesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
