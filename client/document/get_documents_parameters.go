// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDocumentsParams creates a new GetDocumentsParams object
// with the default values initialized.
func NewGetDocumentsParams() *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDocumentsParamsWithTimeout creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDocumentsParamsWithTimeout(timeout time.Duration) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		timeout: timeout,
	}
}

// NewGetDocumentsParamsWithContext creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDocumentsParamsWithContext(ctx context.Context) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		Context: ctx,
	}
}

// NewGetDocumentsParamsWithHTTPClient creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDocumentsParamsWithHTTPClient(client *http.Client) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{
		HTTPClient: client,
	}
}

/*GetDocumentsParams contains all the parameters to send to the API endpoint
for the get documents operation typically these are written to a http.Request
*/
type GetDocumentsParams struct {

	/*CancelID
	  Filter documents by cancel_id. You can add multiple ids separate by comma like id,id,id. With cancel_id=null you get all not canceled documents.

	*/
	CancelID *string
	/*CustomerID
	  Filter documents by customer_id. You can add multiple customer_is separate by comma like id,id,id.

	*/
	CustomerID *string
	/*DocumentDate
	  Filter documents by document_date. You can filter one date with document_date=2014-12-10 or between like 2015-01-01,2015-12-31.

	*/
	DocumentDate *string
	/*FulfillmentCountry
	  Filter documents by fulfillment_country.

	*/
	FulfillmentCountry *string
	/*IsArchive
	  Filter documents by archive flag.

	*/
	IsArchive *string
	/*IsDraft
	  Filter documents by draft flag.

	*/
	IsDraft *string
	/*Limit
	  Limited the result. Default is 100. Maximum can be 1000.

	*/
	Limit *int64
	/*Number
	  Filter documents by number.

	*/
	Number *string
	/*Page
	  Set current Page. Default is 1.

	*/
	Page *int64
	/*PaidAt
	  Filter documents by paid_at. You can filter one date with paid_at=2014-12-10 or between like 2015-01-01,2015-12-31. With paid_at=null you get all unpaid documents.

	*/
	PaidAt *string
	/*ProjectID
	  Filter documents by project_id. You can add multiple project_id separate by comma like id,id,id.

	*/
	ProjectID *string
	/*ShippingCountry
	  Filter documents by shipping_country.

	*/
	ShippingCountry *string
	/*Status
	  Filter documents by status. Keep in mind that not every document type has a status.

	*/
	Status *string
	/*Title
	  Filter documents by title.

	*/
	Title *string
	/*Type
	  Filter documents by type. Multiple typs seperate with , like type=INVOICE,CREDIT.

	*/
	Type *string
	/*VatCountry
	  Filter documents by vat_country.

	*/
	VatCountry *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get documents params
func (o *GetDocumentsParams) WithTimeout(timeout time.Duration) *GetDocumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get documents params
func (o *GetDocumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get documents params
func (o *GetDocumentsParams) WithContext(ctx context.Context) *GetDocumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get documents params
func (o *GetDocumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get documents params
func (o *GetDocumentsParams) WithHTTPClient(client *http.Client) *GetDocumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get documents params
func (o *GetDocumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCancelID adds the cancelID to the get documents params
func (o *GetDocumentsParams) WithCancelID(cancelID *string) *GetDocumentsParams {
	o.SetCancelID(cancelID)
	return o
}

// SetCancelID adds the cancelId to the get documents params
func (o *GetDocumentsParams) SetCancelID(cancelID *string) {
	o.CancelID = cancelID
}

// WithCustomerID adds the customerID to the get documents params
func (o *GetDocumentsParams) WithCustomerID(customerID *string) *GetDocumentsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get documents params
func (o *GetDocumentsParams) SetCustomerID(customerID *string) {
	o.CustomerID = customerID
}

// WithDocumentDate adds the documentDate to the get documents params
func (o *GetDocumentsParams) WithDocumentDate(documentDate *string) *GetDocumentsParams {
	o.SetDocumentDate(documentDate)
	return o
}

// SetDocumentDate adds the documentDate to the get documents params
func (o *GetDocumentsParams) SetDocumentDate(documentDate *string) {
	o.DocumentDate = documentDate
}

// WithFulfillmentCountry adds the fulfillmentCountry to the get documents params
func (o *GetDocumentsParams) WithFulfillmentCountry(fulfillmentCountry *string) *GetDocumentsParams {
	o.SetFulfillmentCountry(fulfillmentCountry)
	return o
}

// SetFulfillmentCountry adds the fulfillmentCountry to the get documents params
func (o *GetDocumentsParams) SetFulfillmentCountry(fulfillmentCountry *string) {
	o.FulfillmentCountry = fulfillmentCountry
}

// WithIsArchive adds the isArchive to the get documents params
func (o *GetDocumentsParams) WithIsArchive(isArchive *string) *GetDocumentsParams {
	o.SetIsArchive(isArchive)
	return o
}

// SetIsArchive adds the isArchive to the get documents params
func (o *GetDocumentsParams) SetIsArchive(isArchive *string) {
	o.IsArchive = isArchive
}

// WithIsDraft adds the isDraft to the get documents params
func (o *GetDocumentsParams) WithIsDraft(isDraft *string) *GetDocumentsParams {
	o.SetIsDraft(isDraft)
	return o
}

// SetIsDraft adds the isDraft to the get documents params
func (o *GetDocumentsParams) SetIsDraft(isDraft *string) {
	o.IsDraft = isDraft
}

// WithLimit adds the limit to the get documents params
func (o *GetDocumentsParams) WithLimit(limit *int64) *GetDocumentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get documents params
func (o *GetDocumentsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNumber adds the number to the get documents params
func (o *GetDocumentsParams) WithNumber(number *string) *GetDocumentsParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get documents params
func (o *GetDocumentsParams) SetNumber(number *string) {
	o.Number = number
}

// WithPage adds the page to the get documents params
func (o *GetDocumentsParams) WithPage(page *int64) *GetDocumentsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get documents params
func (o *GetDocumentsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPaidAt adds the paidAt to the get documents params
func (o *GetDocumentsParams) WithPaidAt(paidAt *string) *GetDocumentsParams {
	o.SetPaidAt(paidAt)
	return o
}

// SetPaidAt adds the paidAt to the get documents params
func (o *GetDocumentsParams) SetPaidAt(paidAt *string) {
	o.PaidAt = paidAt
}

// WithProjectID adds the projectID to the get documents params
func (o *GetDocumentsParams) WithProjectID(projectID *string) *GetDocumentsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get documents params
func (o *GetDocumentsParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithShippingCountry adds the shippingCountry to the get documents params
func (o *GetDocumentsParams) WithShippingCountry(shippingCountry *string) *GetDocumentsParams {
	o.SetShippingCountry(shippingCountry)
	return o
}

// SetShippingCountry adds the shippingCountry to the get documents params
func (o *GetDocumentsParams) SetShippingCountry(shippingCountry *string) {
	o.ShippingCountry = shippingCountry
}

// WithStatus adds the status to the get documents params
func (o *GetDocumentsParams) WithStatus(status *string) *GetDocumentsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get documents params
func (o *GetDocumentsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTitle adds the title to the get documents params
func (o *GetDocumentsParams) WithTitle(title *string) *GetDocumentsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the get documents params
func (o *GetDocumentsParams) SetTitle(title *string) {
	o.Title = title
}

// WithType adds the typeVar to the get documents params
func (o *GetDocumentsParams) WithType(typeVar *string) *GetDocumentsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get documents params
func (o *GetDocumentsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithVatCountry adds the vatCountry to the get documents params
func (o *GetDocumentsParams) WithVatCountry(vatCountry *string) *GetDocumentsParams {
	o.SetVatCountry(vatCountry)
	return o
}

// SetVatCountry adds the vatCountry to the get documents params
func (o *GetDocumentsParams) SetVatCountry(vatCountry *string) {
	o.VatCountry = vatCountry
}

// WriteToRequest writes these params to a swagger request
func (o *GetDocumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CancelID != nil {

		// query param cancel_id
		var qrCancelID string
		if o.CancelID != nil {
			qrCancelID = *o.CancelID
		}
		qCancelID := qrCancelID
		if qCancelID != "" {
			if err := r.SetQueryParam("cancel_id", qCancelID); err != nil {
				return err
			}
		}

	}

	if o.CustomerID != nil {

		// query param customer_id
		var qrCustomerID string
		if o.CustomerID != nil {
			qrCustomerID = *o.CustomerID
		}
		qCustomerID := qrCustomerID
		if qCustomerID != "" {
			if err := r.SetQueryParam("customer_id", qCustomerID); err != nil {
				return err
			}
		}

	}

	if o.DocumentDate != nil {

		// query param document_date
		var qrDocumentDate string
		if o.DocumentDate != nil {
			qrDocumentDate = *o.DocumentDate
		}
		qDocumentDate := qrDocumentDate
		if qDocumentDate != "" {
			if err := r.SetQueryParam("document_date", qDocumentDate); err != nil {
				return err
			}
		}

	}

	if o.FulfillmentCountry != nil {

		// query param fulfillment_country
		var qrFulfillmentCountry string
		if o.FulfillmentCountry != nil {
			qrFulfillmentCountry = *o.FulfillmentCountry
		}
		qFulfillmentCountry := qrFulfillmentCountry
		if qFulfillmentCountry != "" {
			if err := r.SetQueryParam("fulfillment_country", qFulfillmentCountry); err != nil {
				return err
			}
		}

	}

	if o.IsArchive != nil {

		// query param is_archive
		var qrIsArchive string
		if o.IsArchive != nil {
			qrIsArchive = *o.IsArchive
		}
		qIsArchive := qrIsArchive
		if qIsArchive != "" {
			if err := r.SetQueryParam("is_archive", qIsArchive); err != nil {
				return err
			}
		}

	}

	if o.IsDraft != nil {

		// query param is_draft
		var qrIsDraft string
		if o.IsDraft != nil {
			qrIsDraft = *o.IsDraft
		}
		qIsDraft := qrIsDraft
		if qIsDraft != "" {
			if err := r.SetQueryParam("is_draft", qIsDraft); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PaidAt != nil {

		// query param paid_at
		var qrPaidAt string
		if o.PaidAt != nil {
			qrPaidAt = *o.PaidAt
		}
		qPaidAt := qrPaidAt
		if qPaidAt != "" {
			if err := r.SetQueryParam("paid_at", qPaidAt); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param project_id
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ShippingCountry != nil {

		// query param shipping_country
		var qrShippingCountry string
		if o.ShippingCountry != nil {
			qrShippingCountry = *o.ShippingCountry
		}
		qShippingCountry := qrShippingCountry
		if qShippingCountry != "" {
			if err := r.SetQueryParam("shipping_country", qShippingCountry); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.VatCountry != nil {

		// query param vat_country
		var qrVatCountry string
		if o.VatCountry != nil {
			qrVatCountry = *o.VatCountry
		}
		qVatCountry := qrVatCountry
		if qVatCountry != "" {
			if err := r.SetQueryParam("vat_country", qVatCountry); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
