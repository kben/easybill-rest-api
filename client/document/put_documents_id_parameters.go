// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kben/easybill-rest-api/models"
)

// NewPutDocumentsIDParams creates a new PutDocumentsIDParams object
// with the default values initialized.
func NewPutDocumentsIDParams() *PutDocumentsIDParams {
	var ()
	return &PutDocumentsIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDocumentsIDParamsWithTimeout creates a new PutDocumentsIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDocumentsIDParamsWithTimeout(timeout time.Duration) *PutDocumentsIDParams {
	var ()
	return &PutDocumentsIDParams{

		timeout: timeout,
	}
}

// NewPutDocumentsIDParamsWithContext creates a new PutDocumentsIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDocumentsIDParamsWithContext(ctx context.Context) *PutDocumentsIDParams {
	var ()
	return &PutDocumentsIDParams{

		Context: ctx,
	}
}

// NewPutDocumentsIDParamsWithHTTPClient creates a new PutDocumentsIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDocumentsIDParamsWithHTTPClient(client *http.Client) *PutDocumentsIDParams {
	var ()
	return &PutDocumentsIDParams{
		HTTPClient: client,
	}
}

/*PutDocumentsIDParams contains all the parameters to send to the API endpoint
for the put documents ID operation typically these are written to a http.Request
*/
type PutDocumentsIDParams struct {

	/*Body*/
	Body *models.Document
	/*ID
	  ID of document

	*/
	ID int64
	/*RefreshCustomerData
	  Forces refreshing of the customer data.

	*/
	RefreshCustomerData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put documents ID params
func (o *PutDocumentsIDParams) WithTimeout(timeout time.Duration) *PutDocumentsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put documents ID params
func (o *PutDocumentsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put documents ID params
func (o *PutDocumentsIDParams) WithContext(ctx context.Context) *PutDocumentsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put documents ID params
func (o *PutDocumentsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put documents ID params
func (o *PutDocumentsIDParams) WithHTTPClient(client *http.Client) *PutDocumentsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put documents ID params
func (o *PutDocumentsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put documents ID params
func (o *PutDocumentsIDParams) WithBody(body *models.Document) *PutDocumentsIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put documents ID params
func (o *PutDocumentsIDParams) SetBody(body *models.Document) {
	o.Body = body
}

// WithID adds the id to the put documents ID params
func (o *PutDocumentsIDParams) WithID(id int64) *PutDocumentsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put documents ID params
func (o *PutDocumentsIDParams) SetID(id int64) {
	o.ID = id
}

// WithRefreshCustomerData adds the refreshCustomerData to the put documents ID params
func (o *PutDocumentsIDParams) WithRefreshCustomerData(refreshCustomerData *bool) *PutDocumentsIDParams {
	o.SetRefreshCustomerData(refreshCustomerData)
	return o
}

// SetRefreshCustomerData adds the refreshCustomerData to the put documents ID params
func (o *PutDocumentsIDParams) SetRefreshCustomerData(refreshCustomerData *bool) {
	o.RefreshCustomerData = refreshCustomerData
}

// WriteToRequest writes these params to a swagger request
func (o *PutDocumentsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.RefreshCustomerData != nil {

		// query param refresh_customer_data
		var qrRefreshCustomerData bool
		if o.RefreshCustomerData != nil {
			qrRefreshCustomerData = *o.RefreshCustomerData
		}
		qRefreshCustomerData := swag.FormatBool(qrRefreshCustomerData)
		if qRefreshCustomerData != "" {
			if err := r.SetQueryParam("refresh_customer_data", qRefreshCustomerData); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
