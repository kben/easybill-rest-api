// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new document API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for document API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDocumentsID(params *DeleteDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDocumentsIDNoContent, error)

	GetDocuments(params *GetDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDocumentsOK, error)

	GetDocumentsID(params *GetDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDocumentsIDOK, error)

	GetDocumentsIDPdf(params *GetDocumentsIDPdfParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetDocumentsIDPdfOK, error)

	PostDocuments(params *PostDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsCreated, error)

	PostDocumentsIDCancel(params *PostDocumentsIDCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsIDCancelOK, error)

	PostDocumentsIDSendType(params *PostDocumentsIDSendTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsIDSendTypeNoContent, error)

	PutDocumentsID(params *PutDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDocumentsIDOK, error)

	PutDocumentsIDDone(params *PutDocumentsIDDoneParams, authInfo runtime.ClientAuthInfoWriter) (*PutDocumentsIDDoneOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDocumentsID deletes document
*/
func (a *Client) DeleteDocumentsID(params *DeleteDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDocumentsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDocumentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDocumentsID",
		Method:             "DELETE",
		PathPattern:        "/documents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDocumentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDocumentsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDocumentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocuments fetches documents list
*/
func (a *Client) GetDocuments(params *GetDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocuments",
		Method:             "GET",
		PathPattern:        "/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentsID fetches document
*/
func (a *Client) GetDocumentsID(params *GetDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDocumentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentsID",
		Method:             "GET",
		PathPattern:        "/documents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDocumentsIDPdf fetches pdf document
*/
func (a *Client) GetDocumentsIDPdf(params *GetDocumentsIDPdfParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetDocumentsIDPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDocumentsIDPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDocumentsIDPdf",
		Method:             "GET",
		PathPattern:        "/documents/{id}/pdf",
		ProducesMediaTypes: []string{"application/pdf"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDocumentsIDPdfReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDocumentsIDPdfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDocumentsIDPdf: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocuments creates document
*/
func (a *Client) PostDocuments(params *PostDocumentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocuments",
		Method:             "POST",
		PathPattern:        "/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentsIDCancel cancels document
*/
func (a *Client) PostDocumentsIDCancel(params *PostDocumentsIDCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentsIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentsIDCancel",
		Method:             "POST",
		PathPattern:        "/documents/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentsIDCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentsIDCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentsIDCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostDocumentsIDSendType sends document
*/
func (a *Client) PostDocumentsIDSendType(params *PostDocumentsIDSendTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PostDocumentsIDSendTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDocumentsIDSendTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDocumentsIDSendType",
		Method:             "POST",
		PathPattern:        "/documents/{id}/send/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDocumentsIDSendTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDocumentsIDSendTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDocumentsIDSendType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDocumentsID updates document
*/
func (a *Client) PutDocumentsID(params *PutDocumentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDocumentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDocumentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDocumentsID",
		Method:             "PUT",
		PathPattern:        "/documents/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDocumentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDocumentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDocumentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutDocumentsIDDone tos complete a document
*/
func (a *Client) PutDocumentsIDDone(params *PutDocumentsIDDoneParams, authInfo runtime.ClientAuthInfoWriter) (*PutDocumentsIDDoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDocumentsIDDoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDocumentsIDDone",
		Method:             "PUT",
		PathPattern:        "/documents/{id}/done",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDocumentsIDDoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDocumentsIDDoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDocumentsIDDone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
