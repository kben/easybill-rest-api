// Code generated by go-swagger; DO NOT EDIT.

package attachment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new attachment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for attachment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAttachmentsID(params *DeleteAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAttachmentsIDNoContent, error)

	GetAttachments(params *GetAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttachmentsOK, error)

	GetAttachmentsID(params *GetAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttachmentsIDOK, error)

	GetAttachmentsIDContent(params *GetAttachmentsIDContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAttachmentsIDContentOK, error)

	PostAttachments(params *PostAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAttachmentsOK, error)

	PutAttachmentsID(params *PutAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAttachmentsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAttachmentsID deletes attachment
*/
func (a *Client) DeleteAttachmentsID(params *DeleteAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAttachmentsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAttachmentsID",
		Method:             "DELETE",
		PathPattern:        "/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAttachmentsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAttachmentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttachments fetches attachments list
*/
func (a *Client) GetAttachments(params *GetAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAttachments",
		Method:             "GET",
		PathPattern:        "/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAttachments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttachmentsID fetches attachment
*/
func (a *Client) GetAttachmentsID(params *GetAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttachmentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAttachmentsID",
		Method:             "GET",
		PathPattern:        "/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttachmentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAttachmentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttachmentsIDContent fetches attachment content
*/
func (a *Client) GetAttachmentsIDContent(params *GetAttachmentsIDContentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAttachmentsIDContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttachmentsIDContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAttachmentsIDContent",
		Method:             "GET",
		PathPattern:        "/attachments/{id}/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttachmentsIDContentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttachmentsIDContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAttachmentsIDContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAttachments creates attachment
*/
func (a *Client) PostAttachments(params *PostAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAttachments",
		Method:             "POST",
		PathPattern:        "/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAttachments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAttachmentsID updates attachment
*/
func (a *Client) PutAttachmentsID(params *PutAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAttachmentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAttachmentsID",
		Method:             "PUT",
		PathPattern:        "/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAttachmentsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAttachmentsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
