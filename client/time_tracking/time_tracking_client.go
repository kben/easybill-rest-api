// Code generated by go-swagger; DO NOT EDIT.

package time_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new time tracking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for time tracking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTimeTrackingsID(params *DeleteTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTimeTrackingsIDNoContent, error)

	GetTimeTrackings(params *GetTimeTrackingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimeTrackingsOK, error)

	GetTimeTrackingsID(params *GetTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimeTrackingsIDOK, error)

	PostTimeTrackings(params *PostTimeTrackingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostTimeTrackingsCreated, error)

	PutTimeTrackingsID(params *PutTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTimeTrackingsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteTimeTrackingsID deletes time tracking
*/
func (a *Client) DeleteTimeTrackingsID(params *DeleteTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTimeTrackingsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTimeTrackingsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTimeTrackingsID",
		Method:             "DELETE",
		PathPattern:        "/time-trackings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTimeTrackingsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTimeTrackingsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTimeTrackingsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTimeTrackings fetches time trackings list
*/
func (a *Client) GetTimeTrackings(params *GetTimeTrackingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimeTrackingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeTrackingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimeTrackings",
		Method:             "GET",
		PathPattern:        "/time-trackings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTimeTrackingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeTrackingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTimeTrackings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTimeTrackingsID fetches time tracking
*/
func (a *Client) GetTimeTrackingsID(params *GetTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimeTrackingsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimeTrackingsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimeTrackingsID",
		Method:             "GET",
		PathPattern:        "/time-trackings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTimeTrackingsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTimeTrackingsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTimeTrackingsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostTimeTrackings creates time tracking
*/
func (a *Client) PostTimeTrackings(params *PostTimeTrackingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostTimeTrackingsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTimeTrackingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTimeTrackings",
		Method:             "POST",
		PathPattern:        "/time-trackings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTimeTrackingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTimeTrackingsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTimeTrackings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutTimeTrackingsID updates time tracking
*/
func (a *Client) PutTimeTrackingsID(params *PutTimeTrackingsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTimeTrackingsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTimeTrackingsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTimeTrackingsID",
		Method:             "PUT",
		PathPattern:        "/time-trackings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTimeTrackingsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTimeTrackingsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutTimeTrackingsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
