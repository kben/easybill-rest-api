// Code generated by go-swagger; DO NOT EDIT.

package document_payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kben/easybill-rest-api/models"
)

// NewPostDocumentPaymentsParams creates a new PostDocumentPaymentsParams object
// with the default values initialized.
func NewPostDocumentPaymentsParams() *PostDocumentPaymentsParams {
	var ()
	return &PostDocumentPaymentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostDocumentPaymentsParamsWithTimeout creates a new PostDocumentPaymentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostDocumentPaymentsParamsWithTimeout(timeout time.Duration) *PostDocumentPaymentsParams {
	var ()
	return &PostDocumentPaymentsParams{

		timeout: timeout,
	}
}

// NewPostDocumentPaymentsParamsWithContext creates a new PostDocumentPaymentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostDocumentPaymentsParamsWithContext(ctx context.Context) *PostDocumentPaymentsParams {
	var ()
	return &PostDocumentPaymentsParams{

		Context: ctx,
	}
}

// NewPostDocumentPaymentsParamsWithHTTPClient creates a new PostDocumentPaymentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostDocumentPaymentsParamsWithHTTPClient(client *http.Client) *PostDocumentPaymentsParams {
	var ()
	return &PostDocumentPaymentsParams{
		HTTPClient: client,
	}
}

/*PostDocumentPaymentsParams contains all the parameters to send to the API endpoint
for the post document payments operation typically these are written to a http.Request
*/
type PostDocumentPaymentsParams struct {

	/*Body*/
	Body *models.DocumentPayment
	/*Paid
	  Mark document as paid when amount less then payment amount.

	*/
	Paid *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post document payments params
func (o *PostDocumentPaymentsParams) WithTimeout(timeout time.Duration) *PostDocumentPaymentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post document payments params
func (o *PostDocumentPaymentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post document payments params
func (o *PostDocumentPaymentsParams) WithContext(ctx context.Context) *PostDocumentPaymentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post document payments params
func (o *PostDocumentPaymentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post document payments params
func (o *PostDocumentPaymentsParams) WithHTTPClient(client *http.Client) *PostDocumentPaymentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post document payments params
func (o *PostDocumentPaymentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post document payments params
func (o *PostDocumentPaymentsParams) WithBody(body *models.DocumentPayment) *PostDocumentPaymentsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post document payments params
func (o *PostDocumentPaymentsParams) SetBody(body *models.DocumentPayment) {
	o.Body = body
}

// WithPaid adds the paid to the post document payments params
func (o *PostDocumentPaymentsParams) WithPaid(paid *bool) *PostDocumentPaymentsParams {
	o.SetPaid(paid)
	return o
}

// SetPaid adds the paid to the post document payments params
func (o *PostDocumentPaymentsParams) SetPaid(paid *bool) {
	o.Paid = paid
}

// WriteToRequest writes these params to a swagger request
func (o *PostDocumentPaymentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Paid != nil {

		// query param paid
		var qrPaid bool
		if o.Paid != nil {
			qrPaid = *o.Paid
		}
		qPaid := swag.FormatBool(qrPaid)
		if qPaid != "" {
			if err := r.SetQueryParam("paid", qPaid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
